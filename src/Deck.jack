class Deck{
    field Array cards;
    field int peek;

    constructor Deck new(){
        var int counter;

        let cards = Array.new(36);
        let peek = 36;
        let counter = 0;
        
        while (counter < 36){
            let cards[counter] = counter + 1;
            let counter = counter + 1;
        }
        return this;
    }

    method int makeOneShuffle(int i){
        var char pressedKey;
        var int seed;

        let seed = i;
        while (true){
            let pressedKey = Keyboard.keyPressed();
            let seed = seed + 7;
            if (pressedKey = 32){
                do Sys.wait(100);
                do Main.setSeed(seed);
                return seed;
            }
        }
        return -1;
    }

    method void shuffle() {
        var int i, j, temp;
        var Array seeds;
        var int pointer;
        var Random randomizer;

        let seeds = Array.new(36);
        let pointer = 35;

        while (pointer > -1){
            let seeds[pointer] = makeOneShuffle(pointer);
            let pointer = pointer - 1;
        }
    
        let i = 35;
        while (i > -1) {
            let randomizer = Random.new(seeds[i] + i);
            let j = randomizer.nextInt(i + 1);
            let temp = cards[i];
            let cards[i] = cards[j];
            let cards[j] = temp;
            let i = i - 1;
        }
        do seeds.dispose();
        do randomizer.dispose();
        return;
    }


    method Card takeCard(){
        let peek = peek - 1;
        return Card.new(cards[peek] - 1 - (cards[peek] - 1 / 9 * 9), cards[peek] - 1 / 9);
    }

    method void dispose(){
        do cards.dispose();
        do Memory.deAlloc(this);
        return;
    }
}